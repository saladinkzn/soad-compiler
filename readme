This is custom language compilator

Руководство пользователя по использованию компилятора учебного языка, а так же информация по 
структуре проекта и его поддержке.

1. Использование компилятора.
Комилятор (исполняемый файл parser) выполняет следующие действия - считывает из стандартного 
входного потока исходный код до символа EOF (CTRL+D), производит лексический и синтаксический
анализ кода, генерирует llvm-биткод и записывает его в файл a.out.bc. В дальнейшем, этот файл
можно выполнить с помощью утилиты lli : lli a.out.bc.

В целях отладки, компилятор отображает сгенерированный код на языке LLVM-assembly и исполняет его.

2. Структура проекта.
Проект имеет следующую структуру:

1) token.l - файл, содержащий программу для лексического анализатора GNU Flex. 
По этому файлу flex генерирует файл tokens.cpp, содержащий реализацию лексического анализатора на 
языке С для заданной лексики языка.

2) parser.y - файл, содержащий программу для синтаксического анализатора GNU Bison. По этому файлу
данная утилита генерирует файлы parser.cpp и parser.hpp, содержащие реализацию синтаксического анализатора
на языке С для заданного синтаксиса языка.

3) node.h - файл, содержащий объявление структур данных, соответствующих узлам абстрактного синтаксического 
дерева, которое строит семантический анализатор. Эти структуры данных используются для хранения информации,
связанной с узлом синтаксического дерева: например, название переменной для переменной.

4) codegen.h - файл, содержащий служебные классы CodeGenContext и CodeGenBlock используемые для генерации кода,
используя проект LLVM в качестве backend.

5) codegen.cpp - файл, содержащий реализациую методов, объявленных в 3) и 4). Именно в codegen.cpp реализуется
генерация машинного кода по AST.

6) main.cpp - файл, содержащий входную точку программы.

7) каталог tests - содержит тесты, которые могут быть выполнены с помощью cat %имя_теста% | ../parser

Исходные коды на вход компилятора могут подаваться с помощью организации конвейра с утилитой cat ОС *nix.

Построение исполняемого файла выполняется с помощью скрипта build, ожидаюший один входный параметр, который 
является названием файла с исходным кодом без расширения. Файл с исходным кодом должен иметь расширение .sd
